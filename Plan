# step one

delete the css in "/app/page.css ✅

make the component in "/app/page.js" just return the words "home page" ✅

Check the page still loads ✅

move move across the top level of you application, Header, Main and Footer components in "/app/layout.js" file ✅

in your home page component, "/app/page.js", you could put the rest of the home page (main and everything in it). ✅

"global" css (stuff to style the body or wrapper etc) can go in "/app/global.css". ✅

- replace "Inter" with "Aleo" in "/app/layout.js" ✅

# step 2

- make a new folder at the top of the project called "/src" ✅

- create components folder ✅

- transfer component by component to make sure everything works (head and footer) ✅

  - uncomment out component in layout ✅
  - copy component folder to repo ✅
  - check it loads ✅

- transfer component by component to make sure everything works (in main)✅
  - add component to page.js✅
  - copy component folder to repo✅
  - check it loads✅

# Image stuff

- copy over image folder to the "/public" folder ✅
- For each image: ✅
- import Image from next ✅
- check import path✅
- change <img> to <Image> component✅
- IMPORTANT: Remember that Next.js served images require width and height props✅
- check it loads✅

# step 3

- create a new folder "/app/founders" ✅
- inside create a file called "page.js" ✅
- create a super simple component that just returns "<h1>Founders</h1>" ✅
- check it works ✅
- import Link from Next
  - add a Next.js "<Link href="/founders"></Link>" component somewhere on your home page ✅
- check it loads ✅
- (Come back and complete the founders page later) ✅

# step 4

- add a button to your header in layout.js ✅
- add event listener and event handler to button ✅
- create a function that changes the useState upon every click at the top of the Header React component function, so outside the return statement ✅
- import { useState } from 'react' ✅
- create a variable and function for useState ✅
- add 'use client' to top of page ✅
- check loads ✅

# step 4 - interactive menu

- Add founders page and home page link to the new menu✅
- Add a close button to the menu to hide the menu ✅
- Add the Menu component inside the header ✅
- render menu component according to the menuStatus state in our button event handler ✅
- go to the header's component, create a condition statement for if the useState variable is set to True ✅

- close button functionality ✅
- link to open menu button logic ✅

- create a menu React component (a big ol' orange div that displays fullscreen) - we did this in the Header since we were not sure how to get the close button to work if the menu was in its own React component ✅

# step 5

- create new Reviews react component ✅

- Hook new Reviews component up to the Main component ✅

- import useeffect, usestate ✅

- create componant Reviews() ✅

- write return for Reviews(): ✅
  render three buttons with : ✅
- event listeners ✅
- to fat arrows ✅
- changes selectCountry ✅
- to country names England, Scotland, Wales ✅

- create function: selectCountry(name) ✅

- define state variables: selectedCountry, setSelectedCountry, useState as null ✅
- Use setSelectedCountry setter function to set the selectedCountry state ✅

- define state variables: reviewData, setReviewData, useState as null ✅

- call use effect with fat arrow function ✅
- write if (selectedCountry) ✅
- fetch from api✅
  - have the url in back ticks and insert the selected country as a variable ✅
- parse json responce ✅
- use responce to change reviewdata ✅

- dependcency thingy: [selectedCountry] ✅

# step 6
- create some html in Reviews.jsx to display the reviews
- article ✅
 - h3 Trusted ✅
 - h4 blablablab✅
 - buttons goes here ✅
 - p reviewData.text
  - give class and hand props for css 
  - css grey background
  - css boarder radius 
- p reviewer's name - reviewData.author
 - location - reviewData.location

 - create depencency for reviw render upon 

# step 7 change button componant

# Presentaion

- intros
- describe task
- code demo
- planning
- decicions and problems with coloutions and reasioning

- slides
- run through 2
- tiny script
